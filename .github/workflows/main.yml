
name: Django States Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  outdated:
    name: Outdated packages
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[no ci]')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python setup.py install
          python -m pip install --upgrade pip
          pip install -r requirements.txt --user
          pip install -r requirements_dev.txt --user

      - name: outdated
        run: pip list --outdated --not-required --user | grep . && echo "There are outdated packages" && exit 1 || echo "All packages up to date"

  black:
    name: Black
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[no ci]')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python setup.py install
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt

      - name: Black
        run: black --check .

  pre-commit:
    name: Pre-Commit
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[no ci]')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python setup.py install
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
          pre-commit install

      - name: Pre-Commit
        run: pre-commit run --all-files --show-diff-on-failure

  security:
    name: Bandit Security
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[no ci]')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python setup.py install
          pip install bandit

      - name: Bandit
        run: bandit -r django_states -x django_states/tests -s B101 -f json -o report.json

      - name: Show report
        if: ${{ success() || failure() }}
        run: cat report.json

      - name: upload report
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Bandit Security Report
          path: report.json

  django_matrix:
    name: Python ${{ matrix.python-version }} / ${{ matrix.db }} / Django ${{ matrix.django-version}}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[no ci]')"
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      max-parallel: 4
      matrix:
        db: [ sqlite, mysql ]
        django-version: [ "~=3.2.0" ]
        python-version: [ 3.8, 3.9 ]
        experimental: [ false ]
        include:
          - python-version: 3.10.0-beta.4
            db: mysql
            django-version: "~=3.2.0"
            experimental: true
          - python-version: 3.10.0-beta.4
            db: sqlite
            django-version: "~=3.2.0"
            experimental: true

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Verify MySQL connection from host
        if: matrix.db == 'mysql'
        run: |
          mysql --host 127.0.0.1 --port 3306 -uroot -ppassword -e "SHOW DATABASES" 2>&1 > /dev/null

      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner for ${{ matrix.python-version }}."
      - name: Install dependencies
        run: |
          python setup.py install
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
          pip uninstall -y Django
          pip install Django${{ matrix.django-version }}

      - name: Run Django Tests
        env:
          PYTHONWARNINGS: once::DeprecationWarning
          TASK_ALWAYS_EAGER: 1
          GOOGLE_MAPS_CLIENT_ID: ${{ secrets.GOOGLE_MAPS_CLIENT_ID }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |
          demo_app/manage.py test --noinput --settings=demo_app.settings_test django_states.tests

      - name: Django source code check
        run: |
          python demo_app/manage.py check

      - run: echo "üçè This job's status is ${{ job.status }}."

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: django_matrix
    if: "!contains(github.event.head_commit.message, '[no ci]')"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python setup.py install
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt

      - name: Run Django Coverage Test
        env:
          PYTHONWARNINGS: once::DeprecationWarning
          TASK_ALWAYS_EAGER: 1
          GOOGLE_MAPS_CLIENT_ID: ${{ secrets.GOOGLE_MAPS_CLIENT_ID }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |
          coverage erase
          coverage run demo_app/manage.py test --noinput --settings=demo_app.settings_test django_states
          coverage xml -o ./coverage.xml

      - name: Show report
        if: ${{ success() || failure() }}
        run:
          coverage report -m

      - name: Send coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests

      - name: Upload Report
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Coverage Report
          path: coverage.xml
